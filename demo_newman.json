{
	"info": {
		"_postman_id": "fea3bda5-5b84-46ff-bdcb-6b7dc0542dc5",
		"name": "ftx-route-service-mapping with tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Happy",
			"item": [
				{
					"name": "anonymusToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"the status_code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response should contain an access_token\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('access_token');\r",
									"});\r",
									"\r",
									"pm.test(\"response should contain a refresh_token\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.refresh_token).not.to.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"requestid\": \"{{$guid}}\",\r\n    \"transactionid\": \"{{$guid}}\"\r\n}"
						},
						"url": {
							"raw": "{{base_url}}/dev/public/api/v1/auth/anonymus/acquire/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dev",
								"public",
								"api",
								"v1",
								"auth",
								"anonymus",
								"acquire",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"the status_code should be 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"response should have a body with an empty object\", function () {\r",
									"    pm.response.to.have.body({});\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const uuid = require('uuid');\r",
									"pm.environment.set('testUser', uuid.v4() + '@test.hu');\r",
									"const anonymusTokenUrl = pm.variables.get('base_url') + '/dev/public/api/v1/auth/anonymus/acquire/token';\r",
									"pm.sendRequest({\r",
									"    url: anonymusTokenUrl,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"requestid\": \"{{$guid}}\",\r",
									"            \"transactionid\": \"{{$guid}}\"\r",
									"        })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.environment.set('anonymusAccessToken', res.json().access_token);\r",
									"    pm.environment.set('anonymusRefreshToken', res.json().refresh_token)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{anonymusAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": " application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{testUser}}\",\r\n    \"password\": \"{{testUserPassword}}\",\r\n    \"mobile\": \"mobile_attribute\"\r\n}"
						},
						"url": {
							"raw": "{{base_url}}/dev/public/api/v1/auth/registration/init",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dev",
								"public",
								"api",
								"v1",
								"auth",
								"registration",
								"init"
							]
						}
					},
					"response": []
				},
				{
					"name": "emailConfirmPath",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"the status_code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response should have a body with an empty object\", function () {\r",
									"    pm.response.to.have.body({});\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{anonymusAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\r\n     \"email\": \"{{testUser}}\"\r\n }"
						},
						"url": {
							"raw": "{{base_url}}/dev/public/api/v1/auth/validate/email/121332",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dev",
								"public",
								"api",
								"v1",
								"auth",
								"validate",
								"email",
								"121332"
							]
						}
					},
					"response": []
				},
				{
					"name": "smsConfirm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"the status_code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response should have a body with an empty object\", function () {\r",
									"    pm.response.to.have.body({});\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{anonymusAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"otp\": \"SMS\"\r\n}"
						},
						"url": {
							"raw": "{{base_url}}/dev/public/api/v1/auth/registration/otp",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dev",
								"public",
								"api",
								"v1",
								"auth",
								"registration",
								"otp"
							]
						}
					},
					"response": []
				},
				{
					"name": "getUserToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"the status_code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-client-id",
								"value": "backend_app",
								"type": "text"
							},
							{
								"key": "SSL_CLIENT_CERT",
								"value": "test_cert",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/dev/public/api/v1/auth/user/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dev",
								"public",
								"api",
								"v1",
								"auth",
								"user",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "postUserToken-loginWithEmailAndPassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"the status_code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have access_token property\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('access_token');\r",
									"});\r",
									"\r",
									"pm.test(\"access_token should not to be null\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.access_token).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have refresh_token property\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('refresh_token');\r",
									"});\r",
									"\r",
									"pm.test(\"refresh_token should not to be null\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.refresh_token).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have id_token property\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id_token');\r",
									"});\r",
									"\r",
									"pm.test(\"id_token should not to be null\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id_token).not.to.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{anonymusAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{testUser}}\",\r\n    \"password\": \"{{testUserPassword}}\"\r\n}"
						},
						"url": {
							"raw": "{{base_url}}/dev/secured/api/v1/auth/user/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dev",
								"secured",
								"api",
								"v1",
								"auth",
								"user",
								"token"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "postUserToken-refreshToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"the status_code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have access_token property\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('access_token');\r",
									"});\r",
									"\r",
									"pm.test(\"access_token should not to be null\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.access_token).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have refresh_token property\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('refresh_token');\r",
									"});\r",
									"\r",
									"pm.test(\"refresh_token should not to be null\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.refresh_token).not.to.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{anonymusAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"refresh_token\": \"{{anonymusRefreshToken}}\"\r\n}"
						},
						"url": {
							"raw": "{{base_url}}/dev/secured/api/v1/auth/user/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dev",
								"secured",
								"api",
								"v1",
								"auth",
								"user",
								"token"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user/sign/cert",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"the status_code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have signedCert property\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('signedCert');\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have serialNumber property\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('serialNumber');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const userTokenUrl = pm.variables.get('base_url') + '/dev/secured/api/v1/auth/user/token';\r",
									"const bearerToken = 'Bearer ' + pm.environment.get('anonymusAccessToken');\r",
									"pm.sendRequest({\r",
									"    url: userTokenUrl,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': bearerToken\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"email\": \"test@test.hu\",\r",
									"            \"password\": \"otp\"\r",
									"        })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    console.log(res);\r",
									"    pm.environment.set('userAccessToken', res.json().access_token)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"uniqueid\": \"{{$guid}}\",\r\n    \"csr\": \"csr_attribute\"\r\n}"
						},
						"url": {
							"raw": "{{base_url}}/dev/public/api/v1/auth/user/sign/cert",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dev",
								"public",
								"api",
								"v1",
								"auth",
								"user",
								"sign",
								"cert"
							]
						}
					},
					"response": []
				},
				{
					"name": "successSignedCert",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"the status_code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response should have a body with an empty object\", function () {\r",
									"    pm.response.to.have.body({});\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/dev/secured/api/v1/auth/user/sign/cert/success",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dev",
								"secured",
								"api",
								"v1",
								"auth",
								"user",
								"sign",
								"cert",
								"success"
							]
						}
					},
					"response": []
				},
				{
					"name": "renewCert",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"the status_code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have signedCert property\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('signedCert');\r",
									"});\r",
									"\r",
									"pm.test(\"response body should have serialNumber property\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('serialNumber');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"csr\": \"csr_attribute\",\r\n\"uniqueid\": \"{{$guid}}\",\r\n\"serialNumber\": \"1 (0x1)\"\r\n}"
						},
						"url": {
							"raw": "{{base_url}}/dev/secured/api/v1/auth/user/renew/cert",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dev",
								"secured",
								"api",
								"v1",
								"auth",
								"user",
								"renew",
								"cert"
							]
						}
					},
					"response": []
				},
				{
					"name": "successRenewedCert",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"the status_code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response should have a body with an empty object\", function () {\r",
									"    pm.response.to.have.body({});\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"expiredate\": \"1607350427\",\r\n\"serialnumber\": \"1 (0x1)\"\r\n}"
						},
						"url": {
							"raw": "{{base_url}}/dev/secured/api/v1/auth/user/renew/cert/success",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dev",
								"secured",
								"api",
								"v1",
								"auth",
								"user",
								"renew",
								"cert",
								"success"
							]
						}
					},
					"response": []
				},
				{
					"name": "otpLogin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"the status_code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response should contain an access_token\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.access_token).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"response should contain a refresh_token\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.refresh_token).not.to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"response should contain a id_token\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.id_token).not.to.be.null;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{anonymusAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"otp\":\"otp\",\r\n\"email\":\"test@test.hu\",\r\n\"sessionid\": \"{{$guid}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{base_url}}/dev/public/api/v1/auth/user/login/otp",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dev",
								"public",
								"api",
								"v1",
								"auth",
								"user",
								"login",
								"otp"
							]
						}
					},
					"response": []
				},
				{
					"name": "registration-userWithSessionId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"the status_code should be 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"response should have a body with an empty object\", function () {\r",
									"    pm.response.to.have.body({});\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{anonymusAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": " application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"session@email.com\",\r\n    \"password\": \"session\",\r\n    \"mobile\": \"mobile_attribute\"\r\n}"
						},
						"url": {
							"raw": "{{base_url}}/dev/public/api/v1/auth/registration/init",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dev",
								"public",
								"api",
								"v1",
								"auth",
								"registration",
								"init"
							]
						}
					},
					"response": []
				},
				{
					"name": "postUserToken-loginUserWithSessionID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"the status_code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response should contain an session_id\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.session_id).not.to.be.null;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{anonymusAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"email\": \"session@email.com\",\r\n\"password\": \"session\"\r\n}"
						},
						"url": {
							"raw": "{{base_url}}/dev/secured/api/v1/auth/user/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dev",
								"secured",
								"api",
								"v1",
								"auth",
								"user",
								"token"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "userLock",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"the status_code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response should have a body with an empty object\", function () {\r",
									"    pm.response.to.have.body({});\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const postUserTokenUrl = pm.variables.get('base_url') + '/dev/secured/api/v1/auth/user/token';\r",
									"const bearerToken = 'Bearer ' + pm.environment.get('anonymusAccessToken');\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: postUserTokenUrl,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': bearerToken\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"email\": \"session@email.com\",\r",
									"            \"password\": \"session\"\r",
									"        })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.environment.set('sessionId', res.json().session_id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"sessionid\": \"{{sessionId}}\"\r\n}"
						},
						"url": {
							"raw": "{{base_url}}/dev/secured/api/v1/auth/user/lock",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dev",
								"secured",
								"api",
								"v1",
								"auth",
								"user",
								"lock"
							]
						}
					},
					"response": []
				},
				{
					"name": "userWipe",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"the status_code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response should have a body with an empty object\", function () {\r",
									"    pm.response.to.have.body({\"notes\": \"Revoked x509 successfully\"});\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const postUserTokenUrl = pm.variables.get('base_url') + '/dev/secured/api/v1/auth/user/token';\r",
									"const bearerToken = 'Bearer ' + pm.environment.get('anonymusAccessToken');\r",
									"\r",
									"pm.sendRequest({\r",
									"    url: postUserTokenUrl,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json',\r",
									"        'Authorization': bearerToken\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"email\": \"session@email.com\",\r",
									"            \"password\": \"session\"\r",
									"        })\r",
									"    }\r",
									"}, function (err, res) {\r",
									"    pm.environment.set('sessionId', res.json().session_id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"sessionid\": \"{{sessionId}}\"\r\n}"
						},
						"url": {
							"raw": "{{base_url}}/dev/secured/api/v1/auth/user/wipe",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dev",
								"secured",
								"api",
								"v1",
								"auth",
								"user",
								"wipe"
							]
						}
					},
					"response": []
				},
				{
					"name": "uploadKycDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"the status_code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response should have a body with an empty object\", function () {\r",
									"    pm.response.to.have.body({});\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"regID\": \"12121\",\r\n    \"address\": \"fake address\"\r\n}"
						},
						"url": {
							"raw": "{{base_url}}/dev/secured/api/v1/auth/kyc/uploadUserDetails",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dev",
								"secured",
								"api",
								"v1",
								"auth",
								"kyc",
								"uploadUserDetails"
							]
						}
					},
					"response": []
				},
				{
					"name": "uploadKycPhotos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"the status_code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response should have a body with an empty object\", function () {\r",
									"    pm.response.to.have.body({});\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "idcard",
									"type": "file",
									"src": "/C:/Users/Developer/Work/fintechX-api-gateway/helpers/postmanphotos/IdCard.JPG"
								},
								{
									"key": "selfiephoto",
									"type": "file",
									"src": "/C:/Users/Developer/Work/fintechX-api-gateway/helpers/postmanphotos/Selfie.JPG"
								},
								{
									"key": "addresscard",
									"type": "file",
									"src": "/C:/Users/Developer/Work/fintechX-api-gateway/helpers/postmanphotos/AddressCard.JPG"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/dev/secured/api/v1/auth/kyc/uploadPhotos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dev",
								"secured",
								"api",
								"v1",
								"auth",
								"kyc",
								"uploadPhotos"
							]
						},
						"description": "példa fotókat tettem fel ide: https://drive.google.com/drive/u/0/folders/11-YxflJQlB6Il8EM4Aucnj1C9gRmO4J9"
					},
					"response": []
				},
				{
					"name": "customerCards",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"the status_code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response should have a body with an empty object\", function () {\r",
									"    pm.response.to.have.body({});\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/dev/secured/api/v1/customer/1234596654/cards",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dev",
								"secured",
								"api",
								"v1",
								"customer",
								"1234596654",
								"cards"
							]
						}
					},
					"response": []
				},
				{
					"name": "accountDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"the status_code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response should have a body with an empty object\", function () {\r",
									"    pm.response.to.have.body({});\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"accountids\": [\"12345\", \"2332423\"]\r\n}"
						},
						"url": {
							"raw": "{{base_url}}/dev/secured/api/v1/accounts/details",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dev",
								"secured",
								"api",
								"v1",
								"accounts",
								"details"
							]
						}
					},
					"response": []
				},
				{
					"name": "getCardById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response should be okay to process\", function () {\r",
									"    pm.response.to.not.be.error;\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"the status_code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response should have a body with an empty object\", function () {\r",
									"    pm.response.to.have.body({});\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/dev/secured/api/v1/card/1234596654",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"dev",
								"secured",
								"api",
								"v1",
								"card",
								"1234596654"
							]
						},
						"description": "http://api.ftxapigw.fintechblocks.com:8000/mock/secured/api/v1/card/1234596654"
					},
					"response": []
				}
			]
		},
		{
			"name": "anonymusToken - correlation-id in response",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response should be okay to process\", function () {\r",
							"    pm.response.to.not.be.error;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"the status_code should be 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"x-correlation-id header is present\", () => {\r",
							"  pm.response.to.have.header(\"x-correlation-id\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"requestid\": \"{{$guid}}\",\r\n    \"transactionid\": \"{{$guid}}\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/dev/public/api/v1/auth/anonymus/acquire/token",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"dev",
						"public",
						"api",
						"v1",
						"auth",
						"anonymus",
						"acquire",
						"token"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}